#!/bin/sh

#-------------------------------------------------------------
# FLASHSTART HYBRID - admin_execute SCRIPTS
#-------------------------------------------------------------
# check init inlcude defined in fs_hybrid
if [ "$INIT_SRC_INCLUDE" != "1" ]; then echo "call %SCRIPT_DIR%/%SCRIPT_FS% admin_execute"; exit; fi

# set path
PROC_DIR=$PATH_RAM_TEMP
PROC_LABEL="admin_procedure-"

# check exits
COUNT_PROCEDURE=$(find $PROC_DIR -name "$PROC_LABEL*" | wc -l)
if [ "$COUNT_PROCEDURE" = "0" ]; then
	exit;
fi


#--------------------------
# Local function
#--------------------------
execute_procedure() {
	# get data
	local PROCEDURE=$1
	local PARAM=$2
	
	local LOG_PROCEDURE=""
	local RESULT_PROC
	local CHECK_RESULT
	local CHECK_DONE
	local DONE=0
	
	# PARAM > DA FINIRE e controllare in base alla procedure, eventualmente mettere un divisore (es. ;) se possono essere piÃ¹ variabili
	
	# execute by procedure
	if [ "$PROCEDURE" == "firewall" ]; then 
		if [ "$PARAM" == "stop" ]; then 
			# stop shorewall
			RESULT_PROC=$($SHOREWALL stop 2>&1 )
			CHECK_RESULT=$(echo "$RESULT_PROC" | grep "/etc/shorewall/stopped" | wc -l )
			CHECK_DONE=${RESULT_PROC: -5}
			# set log response
			if [ "$CHECK_RESULT" == "1" -a "$CHECK_DONE" == "done." ]; then
				LOG_PROCEDURE="STOPPED"
				DONE=1
			fi
		elif [ "$PARAM" == "restart" ]; then 
			# stop shorewall
			RESULT_PROC=$($SHOREWALL restart 2>&1 )
			CHECK_RESULT=$(echo "$RESULT_PROC" | grep "/etc/shorewall/started" | wc -l )
			CHECK_DONE=${RESULT_PROC: -5}
			# set log response
			if [ "$CHECK_RESULT" == "1" -a "$CHECK_DONE" == "done." ]; then
				LOG_PROCEDURE="RESTARTED"
				DONE=1
			fi
		fi
		
		# set error
		if [ "$DONE" == "0" ]; then
			LOG_PROCEDURE="ERROR "$(echo "$RESULT_PROC" | tr '\n' ' - ')
		fi
	
	
	elif [ "$PROCEDURE" == "update" ]; then 
		# call update with api check ignore
		$SCRIPT_FS software_update 0 1
		# set log
		LOG_PROCEDURE="CALL YUM UPDATE"
	
	elif [ "$PROCEDURE" == "event" ]; then 
		# split param list
		CODE_JOB=$(echo "$PARAM" | cut -d ';' -f 1)
		IP=$(echo "$PARAM" | cut -d ';' -f 2)
		DNS=$(echo "$PARAM" | cut -d ';' -f 3)
		LOG=$(echo "$PARAM" | cut -d ';' -f 4)
		USER=$(echo "$PARAM" | cut -d ';' -f 5)
		
		# call update with api check ignore
		$SCRIPT_FS match_clients "$CODE_JOB" "$IP" "$DNS" "$LOG" "$USER"
		# set log
		LOG_PROCEDURE="CALL MATCH CLIENTS ($CODE_JOB $IP $DNS $LOG $USER)"
		
		# only for logi
	
	# elif # PER ALTRE PROCEDURE
	fi
	
	echo "$LOG_PROCEDURE"
}


#--------------------------
# Check
#--------------------------
for FILE in $(ls -d $PROC_DIR$PROC_LABEL*)
do
	FILE_DATA=$(basename -- "$FILE")
	FILE_NAME="${FILE_DATA%.*}"
	
	SEND_PROCEDURE=$(echo "$FILE_NAME" | cut -d '-' -f 2)
	SEND_VARIABLE=$(cat $FILE)
	
	# set log string
	PROCEDURE_LOG="$SEND_PROCEDURE"
	if [ "$SEND_VARIABLE" != "" ]; then PROCEDURE_LOG="$PROCEDURE_LOG $SEND_VARIABLE"; fi
	
	
	# Log request
	fn_log "$CALL_PROC" "$LOG_LABEL_INFO call $PROCEDURE_LOG"

	# execute
    PROC_STATUS=$(execute_procedure "$SEND_PROCEDURE" "$SEND_VARIABLE")
	
	# Log status
	fn_log "$CALL_PROC" "$LOG_LABEL_INFO result $PROCEDURE_LOG - $PROC_STATUS"
	
	# remove file
	$RM $FILE
	
done




